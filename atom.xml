<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Scott Stephens</title>
 <link href="www.scott.stephens.name/atom.xml" rel="self"/>
 <link href="www.scott.stephens.name/"/>
 <updated>2016-10-23T18:07:21-05:00</updated>
 <id>www.scott.stephens.name</id>
 <author>
   <name>Scott Stephens</name>
   <email>stephens.js@gmail.com</email>
 </author>

 
 <entry>
   <title>Dell XPS 13 9350 SSD Upgrade: SATA to NVMe</title>
   <link href="www.scott.stephens.name/2016/10/23/xps-9350-ssd-upgrade/"/>
   <updated>2016-10-23T00:00:00-05:00</updated>
   <id>www.scott.stephens.name/2016/10/23/xps-9350-ssd-upgrade</id>
   <content type="html">&lt;p&gt;I recently upgraded my Dell XPS 13 9350’s SSD from the stock 128 GB Samsung CM-871 to a 512 GB Intel 600p.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; It’s a somewhat unusual upgrade because the CM-871 is a SATA 3 drive, and the 600p is an NVMe drive. In most machines swapping a SATA drive for an NVMe drive will not work. But it will with the XPS 9350. While the 128 GB version comes with a SATA drive, the models with 256 and 512 GB of storage both come with NVMe drives. So the motherboard supports both SATA and NVMe. Several owners have reported their success upgrading their 128 GB drive to a Samsung 950 Pro&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. However,  in all the reports I’ve found those upgraders did a fresh install of Windows 10, rather than cloning their drive and keeping their installed programs, settings, and data. I’ve managed this latter feat, and I thought it might be worth documenting my experience in case it helps others. Read on, and you’ll learn how.&lt;/p&gt;

&lt;p&gt;Before you get started, make sure you have the following on hand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 usb drives of at least 8 GB&lt;/li&gt;
  &lt;li&gt;A USB hard drive with at least 128 GB free&lt;/li&gt;
  &lt;li&gt;A torx T5 screwdriver&lt;/li&gt;
  &lt;li&gt;A philips head 1.2 mm screwdriver. A phillips #000 is probably roughly the same size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The upgrade procedure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a Ubuntu Live USB (&lt;a href=&quot;https://www.ubuntu.com/download/desktop&quot;&gt;download&lt;/a&gt;, &lt;a href=&quot;https://www.ubuntu.com/download/desktop/create-a-usb-stick-on-windows&quot;&gt;instructions&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;When working with Rufus, select the ISO image first, even though it’s at the bottom of the form. It resets the other settings.&lt;/li&gt;
      &lt;li&gt;Choose a GPT partition table for UEFI only.&lt;/li&gt;
      &lt;li&gt;Use FAT32 as the file system.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Download &lt;a href=&quot;http://www.macrium.com/reflectfree.aspx&quot;&gt;Macrium Reflect&lt;/a&gt; and use it to create a backup image of your existing SSD AND to create rescue media.
    &lt;ul&gt;
      &lt;li&gt;Good tutorial of using Reflect to backup and restore, as well as the physical drive replacement: &lt;a href=&quot;http://www.laptopmag.com/articles/upgrade-dell-xps-13-ssd&quot;&gt;http://www.laptopmag.com/articles/upgrade-dell-xps-13-ssd&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Test the Reflect rescue disk, and the Ubuntu live disk.
    &lt;ul&gt;
      &lt;li&gt;Press F12 to trigger the boot menu on the XPS 9350.&lt;/li&gt;
      &lt;li&gt;You may need to add options to the boot menu. It’s in the General-&amp;gt;Boot Sequence menu inside the UEFI/BIOS settings.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Do the physical drive replacement.
    &lt;ul&gt;
      &lt;li&gt;See &lt;a href=&quot;http://www.laptopmag.com/articles/upgrade-dell-xps-13-ssd&quot;&gt;laptop magazine article&lt;/a&gt; referenced earlier.&lt;/li&gt;
      &lt;li&gt;Note that they erroneosly call for a pentalobe screwdriver; you actually need a torx.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Boot into the Reflect rescue environment, restore your image to the new disk.
    &lt;ul&gt;
      &lt;li&gt;Again, see the &lt;a href=&quot;http://www.laptopmag.com/articles/upgrade-dell-xps-13-ssd&quot;&gt;laptop magazine article&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Boot using your newly installed disk to confirm the restore worked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart the computer and boot into the Ubuntu Live environment. Use gparted to adjust the size of your partitions.
    &lt;ul&gt;
      &lt;li&gt;In order for Ubuntu to be able to find the NVME hard drive, you need to change a UEFI/BIOS setting. You’ll be changing the storage controller from RAID mode to AHCI mode. It’s in the System Configuration-&amp;gt;SATA Operation menu.&lt;/li&gt;
      &lt;li&gt;Assuming you haven’t changed the factory partitions, you’ll have 4 on the old hard drive: a 500 MB boot partition, a 128 MB reserved partition, a ~127.8 GB data and OS partition, and a 850 MB recovery parition.&lt;/li&gt;
      &lt;li&gt;After the clone, you’ll have the same partitions, plus some unallocated space at the end of the disk.&lt;/li&gt;
      &lt;li&gt;I deleted the recovery partition, then expanded the main partition to fill all of the empty space. Windows 10s built-in disk partition tool can’t expand an NTFS partition, which is why I used gparted.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart the computer and boot into the restored Windows 10 environment
    &lt;ul&gt;
      &lt;li&gt;You’ll need to change the storage firmware setting back to RAID mode in order to boot into Windows.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some additional commentary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you only have one USB thumb drive, you can move creation of the Ubuntu drive to between steps 6 and 7, reusing the drive you used for the Reflect restore environment. The reason I suggest two is for troubleshooting. If your newly installed drive can’t boot you can boot into Ubuntu to use the web, create new USB drives, examine the partitions, etc. If you only have the one, and your first attempt fails, you’ll have to swap out the drive physically in between attempts, which is a pain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For my first attempt at doing the clone, I used gparted and dd within Ubuntu to clone the existing partitions to the backup drive, and then to restore them to the new drive. Windows would not boot after doing this. A Windows rescue disk that I had made prior to starting the backup and restore process was unable to repair the boot problem. I also tried with Acronis True Image 2015, which also failed. So I strongly suggest using Reflect, and not something similar. The switch from SATA to NVME seems to confound a lot of the typical methods of clone and restore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some internet commentary talks about solutions to booting problems involving turning off Secure Boot, and/or enabling legacy mode booting. I didn’t experiment with changing those settings. It’s possible that changing those settings would have fixed my problems using the Windows rescue disk to repair my dd-cloned boot partition. I doubt it though; I didn’t have any problems booting my repair disk, it just wasn’t able to repair my boot partition.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Intel recently released the &lt;a href=&quot;http://www.intel.com/content/www/us/en/solid-state-drives/solid-state-drives-600p-series.html&quot;&gt;600p&lt;/a&gt; line of SSDs. They use the new NVMe interface, and offer an intermediate level of performance between SATA drives and the other NVMe drives on the market (the Samsung 950 Pro, the Toshiba RD400). But whereas the 950 pro will set you back about $315 for a 512 GB model, at the time of writing you can get a 512 GB 600p from &lt;a href=&quot;http://www.microcenter.com/product/468436/600p_512GB_M2_Internal_SSD&quot;&gt;Microcenter&lt;/a&gt; for only $170, which is quite competitive with SATA 3 drive prices. It seemed like a good deal to me, and induced me to upgrade. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;See, for instance reddit posts by &lt;a href=&quot;https://www.reddit.com/r/Dell/comments/3zfqmx/samsung_950_pro_speed_on_dell_xps_13_9350/&quot;&gt;/u/kentjapan&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/Dell/comments/4tyqof/does_the_xps_13_9350_with_128_gb_ssd_support_pcie/&quot;&gt;/u/jerkel&lt;/a&gt;, and &lt;a href=&quot;https://www.reddit.com/r/Dell/comments/4cbsn2/xps_13_9350_nvme_issue_after_bios_update/&quot;&gt;/u/soymilk&lt;/a&gt;. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>About the Work Timer</title>
   <link href="www.scott.stephens.name/2016/08/12/about-the-work-timer/"/>
   <updated>2016-08-12T00:00:00-05:00</updated>
   <id>www.scott.stephens.name/2016/08/12/about-the-work-timer</id>
   <content type="html">&lt;p&gt;I made the work timer primarily as an exercise to learn some javascript and CSS, but I thought it might be worth describing how I use it, in case anyone stumbles upon it and is curious.&lt;/p&gt;

&lt;p&gt;I often work with a variation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Pomodoro Timer&lt;/a&gt; productivity system. For the first 25 minutes after starting work, I keep working regardless of how frustrated I feel. After the first 25 minutes, I take a 5-10 minute break whenever I feel even a little frustrated. It helps me perserve long enough when starting work to get into &lt;a href=&quot;https://en.wikipedia.org/wiki/Flow_(psychology)&quot;&gt;flow&lt;/a&gt;, but break often enough that I don’t get excessively fatigued.&lt;/p&gt;

&lt;p&gt;The existing pomodoro timers I found online didn’t work great with my modifications. At the end of a work period they would tend to either alert until the user interacted with the timer, or they would alert and then automatically go into the following break period. Either made it necessary for me to interact with the software at the end of the initial work period, which would sometimes knock me out of flow. So at the end of a work or break period, my timer makes a minimally obtrusive alert, then keeps counting the time. When I’ve decided I want to stop, I can tell the timer I’ve switched to a different period. It also tracks my history, so I can see how much actual working I’m doing every day, essentially gamifying my productivity efforts.&lt;/p&gt;

&lt;p&gt;From a pure productivity standpoint writing a customized timer would have been a huge loser (given how much time I spent learning javascript and CSS). But it was a great project for learning. And I got a tool I can actually use as a bonus.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World!</title>
   <link href="www.scott.stephens.name/2016/08/11/hello-world/"/>
   <updated>2016-08-11T00:00:00-05:00</updated>
   <id>www.scott.stephens.name/2016/08/11/hello-world</id>
   <content type="html">&lt;p&gt;I created this site primarily as a learning exercise. I program a lot, but, unlike a lot of other programmers, what I program typically has nothing whatsoever to do with the world wide web. Or even a corporate intra-web. Given the ubiquity of web apps I thought it might be a good idea to be at least minimally familiar with web programming. Enough that when developers talk about web stuff my blank uncomprehending stare doesn’t make them wonder if I really know how to program at all. Backend web stuff is actually pretty similar to the stuff I do every day, so for me this was mostly about the front-end, client-side web. Since for me learning by doing is the only way to go, I needed to make a website.&lt;/p&gt;

&lt;p&gt;I started with using Jekyll to generate a static site, since that seemed like the easiest possible way to get a useful site. After realizing just how easy that was, I realized I needed a more substantial project if I actually wanted to learn anything. I’ve been using Pomodoro timers as a productivity tool recently, and decided that writing my own would make a good project.&lt;/p&gt;

&lt;p&gt;After building the site it seemed silly not to actually publish it, so here it is. I guess I have a blog now. I don’t know that I will end up posting with any regularity, but who knows.&lt;/p&gt;
</content>
 </entry>
 

</feed>
